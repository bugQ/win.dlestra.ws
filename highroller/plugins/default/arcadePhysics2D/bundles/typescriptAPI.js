(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// <reference path="../../typescript/typescriptAPI/TypeScriptAPIPlugin.d.ts" />

SupCore.system.registerPlugin("typescriptAPI", "Sup.ArcadePhysics2D", {
    code: "namespace Sup {\r\n  export namespace ArcadePhysics2D {\r\n    export function getAllBodies() {\r\n      var allBodies = [];\r\n      for (var body of SupEngine.ArcadePhysics2D.allBodies) allBodies.push(body.__outer);\r\n      return allBodies;\r\n    }\r\n    export function setGravity(gravity: number|Sup.Math.Vector2, y?: number) {\r\n      if (typeof gravity === \"number\") SupEngine.ArcadePhysics2D.gravity.set(gravity, y);\r\n      else SupEngine.ArcadePhysics2D.gravity.set(gravity.x, gravity.y);\r\n    }\r\n    export function getGravity() { return new Sup.Math.Vector2(SupEngine.ArcadePhysics2D.gravity.x, SupEngine.ArcadePhysics2D.gravity.y)}\r\n    export function intersects(body1, body2) {\r\n      return SupEngine.ArcadePhysics2D.intersects(body1.__inner, body2.__inner);\r\n    }\r\n    export function collides(body1, body2) {\r\n      var bodies = [];\r\n      if (Array.isArray(body2) ) {\r\n        body2.forEach((body) => {\r\n          bodies.push(body.__inner);\r\n          })\r\n        }\r\n      else bodies.push(body2.__inner);\r\n      return SupEngine.ArcadePhysics2D.collides(body1.__inner, bodies);\r\n    }\r\n  }\r\n}\r\n",
    defs: "declare namespace Sup {\r\n  namespace ArcadePhysics2D {\r\n    function getAllBodies(): Array<Body>;\r\n    function setGravity(gravity: Sup.Math.Vector2);\r\n    function setGravity(x: number, y: number);\r\n    function getGravity(): Sup.Math.Vector2;\r\n    function intersects(body1: Body, body2: Body): boolean;\r\n    function collides(body1: Body, body2: Body): boolean;\r\n    function collides(body1: Body, body2: Array<Body>): boolean;\r\n  }\r\n}\r\n",
});
SupCore.system.registerPlugin("typescriptAPI", "ArcadeBody2D", {
    code: "namespace Sup {\r\n  export namespace ArcadePhysics2D {\r\n    export enum BodyType { Box, TileMap };\r\n\r\n    export class Body extends ActorComponent {\r\n      constructor(actor: Sup.Actor, type: BodyType, options) {\r\n        super(actor);\r\n\r\n        this.__inner = new SupEngine.componentClasses.ArcadeBody2D(actor.__inner);\r\n        if (type === Sup.ArcadePhysics2D.BodyType.Box) this.__inner.setupBox(options);\r\n        else if (type === Sup.ArcadePhysics2D.BodyType.TileMap) {\r\n          options.tileSetAsset = player.getOuterAsset(options.tileMapAsset.__inner.data.tileSetId);\r\n          this.__inner.setupTileMap(options);\r\n        }\r\n        this.__inner.__outer = this;\r\n        this.actor.arcadeBody2D = this;\r\n      }\r\n      destroy() {\r\n        this.actor.arcadeBody2D = null;\r\n        super.destroy();\r\n      }\r\n\r\n      setEnabled(enabled: boolean) { this.__inner.enabled = enabled; return this; }\r\n      getEnabled() { return this.__inner.enabled; }\r\n\r\n      setMovable(movable: boolean) {\r\n        this.__inner.movable = movable;\r\n        return this;\r\n      }\r\n      getMovable() { return this.__inner.movable; }\r\n\r\n      setCustomGravity(gravity: Sup.Math.XY|number, y?: number) {\r\n        if (typeof gravity === \"number\") {\r\n          this.__inner.customGravity.x = gravity;\r\n          this.__inner.customGravity.y = y;\r\n        } else {\r\n          this.__inner.customGravity.x = gravity.x;\r\n          this.__inner.customGravity.y = gravity.y;\r\n        }\r\n      }\r\n      setCustomGravityX(x: number) { this.__inner.customGravity.x = x; }\r\n      setCustomGravityY(y: number) { this.__inner.customGravity.y = y; }\r\n      getCustomGravity() { return new Sup.Math.Vector2(this.__inner.customGravity.x, this.__inner.customGravity.y); }\r\n      getCustomGravityX() { return this.__inner.customGravity.x; }\r\n      getCustomGravityY() { return this.__inner.customGravity.y; }\r\n\r\n      setSize(width: number, height: number) {\r\n        this.__inner.width = width;\r\n        this.__inner.height = height;\r\n        return this;\r\n      }\r\n      getSize() { return { width: this.__inner.width, height: this.__inner.height}; }\r\n\r\n      setOffset(offset) {\r\n        this.__inner.offsetX = offset.x;\r\n        this.__inner.position.x = this.__inner.actorPosition.x + offset.x;\r\n        this.__inner.offsetY = offset.y;\r\n        this.__inner.position.y = this.__inner.actorPosition.y + offset.y;\r\n        return this;\r\n      }\r\n      getOffset() { return new Sup.Math.Vector2(this.__inner.offsetX, this.__inner.offsetY); }\r\n\r\n      warpPosition(position: Sup.Math.XY|number, y?: number) {\r\n        if (typeof position === \"number\") this.__inner.warpPosition(position, y);\r\n        else this.__inner.warpPosition(position.x, position.y);\r\n        return this;\r\n      }\r\n\r\n      setVelocity(velocity: Sup.Math.XY|number, y?: number) {\r\n        if (typeof velocity === \"number\") {\r\n          this.__inner.velocity.x = velocity;\r\n          this.__inner.velocity.y = y;\r\n        } else {\r\n          this.__inner.velocity.x = velocity.x;\r\n          this.__inner.velocity.y = velocity.y;\r\n        }\r\n        return this;\r\n      }\r\n      setVelocityX(x: number) {\r\n        this.__inner.velocity.x = x;\r\n        return this;\r\n      }\r\n      setVelocityY(y: number) {\r\n        this.__inner.velocity.y = y;\r\n        return this;\r\n      }\r\n      getVelocity() { return new Sup.Math.Vector2(this.__inner.velocity.x, this.__inner.velocity.y); }\r\n      getVelocityX() { return this.__inner.velocity.x; }\r\n      getVelocityY() { return this.__inner.velocity.y; }\r\n\r\n      addVelocity(velocity: Sup.Math.XY|number, y?: number) {\r\n        if (typeof velocity === \"number\") {\r\n          this.__inner.velocity.x += velocity;\r\n          this.__inner.velocity.y += y;\r\n        } else {\r\n          this.__inner.velocity.x += velocity.x;\r\n          this.__inner.velocity.y += velocity.y;\r\n        }\r\n      }\r\n      addVelocityX(x: number) { this.__inner.velocity.x += x; }\r\n      addVelocityY(y: number) { this.__inner.velocity.y += y; }\r\n\r\n      setVelocityMin(velocityMin: Sup.Math.XY|number, y?: number) {\r\n        if (typeof velocityMin === \"number\") {\r\n          this.__inner.velocityMin.x = velocityMin;\r\n          this.__inner.velocityMin.y = y;\r\n        } else {\r\n          this.__inner.velocityMin.x = velocityMin.x;\r\n          this.__inner.velocityMin.y = velocityMin.y;\r\n        }\r\n        return this;\r\n      }\r\n      getVelocityMin() { return new Sup.Math.Vector2(this.__inner.velocityMin.x, this.__inner.velocityMin.y); }\r\n\r\n      setVelocityMax(velocityMax: Sup.Math.XY|number, y?: number) {\r\n        if (typeof velocityMax === \"number\") {\r\n          this.__inner.velocityMax.x = velocityMax;\r\n          this.__inner.velocityMax.y = y;\r\n        } else {\r\n          this.__inner.velocityMax.x = velocityMax.x;\r\n          this.__inner.velocityMax.y = velocityMax.y;\r\n        }\r\n        return this;\r\n      }\r\n      getVelocityMax() { return new Sup.Math.Vector2(this.__inner.velocityMax.x, this.__inner.velocityMax.y); }\r\n\r\n      setVelocityMultiplier(velocityMultiplier: Sup.Math.XY|number, y?: number) {\r\n        if (typeof velocityMultiplier === \"number\") {\r\n          this.__inner.velocityMultiplier.x = velocityMultiplier;\r\n          this.__inner.velocityMultiplier.y = y;\r\n        } else {\r\n          this.__inner.velocityMultiplier.x = velocityMultiplier.x;\r\n          this.__inner.velocityMultiplier.y = velocityMultiplier.y;\r\n        }\r\n        return this;\r\n      }\r\n      getVelocityMultiplier() { return new Sup.Math.Vector2(this.__inner.velocityMultiplier.x, this.__inner.velocityMultiplier.y); }\r\n\r\n      getTouches() {\r\n        return {\r\n          left: this.__inner.touches.left, right : this.__inner.touches.right,\r\n          top : this.__inner.touches.top , bottom: this.__inner.touches.bottom\r\n        };\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    defs: "interface BoxOptions {\r\n  movable: boolean;\r\n  width: number;\r\n  height: number;\r\n  offset?: { x: number; y: number; };\r\n  bounceX?: number;\r\n  bounceY?: number\r\n}\r\n\r\ninterface TileMapOptions {\r\n  tileMapAsset: Sup.TileMap;\r\n  tileSetPropertyName?: string;\r\n  layersIndex?: string;\r\n}\r\n\r\ndeclare namespace Sup {\r\n  namespace ArcadePhysics2D {\r\n    enum BodyType { Box, TileMap }\r\n\r\n    class Body extends ActorComponent {\r\n      constructor(actor: Sup.Actor, type: BodyType, options: BoxOptions|TileMapOptions);\r\n\r\n      setEnabled(enabled: boolean): Body;\r\n      getEnabled(): boolean;\r\n      setMovable(movable: boolean): Body;\r\n      getMovable(): boolean;\r\n\r\n      setCustomGravity(gravity: Sup.Math.XY): Body;\r\n      setCustomGravity(x: number, y: number): Body;\r\n      setCustomGravityX(x: number): Body;\r\n      setCustomGravityY(y: number): Body;\r\n      getCustomGravity(): Sup.Math.Vector2;\r\n      getCustomGravityX(): number;\r\n      getCustomGravityY(): number;\r\n\r\n      setSize(width: number, height: number): Body;\r\n      getSize(): { width: number; height: number; };\r\n      setOffset(offset: { x: number; y: number; }): Body;\r\n      getOffset(): Sup.Math.Vector2;\r\n\r\n      warpPosition(position: Sup.Math.XY): Body;\r\n      warpPosition(x: number, y: number): Body;\r\n\r\n      setVelocity(velocity: Sup.Math.XY): Body;\r\n      setVelocity(x: number, y: number): Body;\r\n      setVelocityX(x: number): Body;\r\n      setVelocityY(y: number): Body;\r\n      getVelocity(): Sup.Math.Vector2;\r\n      getVelocityX(): number;\r\n      getVelocityY(): number;\r\n      addVelocity(velocity: Sup.Math.XY): Body;\r\n      addVelocity(x: number, y: number): Body;\r\n      addVelocityX(x: number): Body;\r\n      addVelocityY(y: number): Body;\r\n\r\n      setVelocityMin(velocityMin: Sup.Math.XY): Body;\r\n      setVelocityMin(x: number, y: number): Body;\r\n      getVelocityMin(): Sup.Math.Vector2;\r\n      setVelocityMax(velocityMax: Sup.Math.XY): Body;\r\n      setVelocityMax(x: number, y: number): Body;\r\n      getVelocityMax(): Sup.Math.Vector2;\r\n      setVelocityMultiplier(velocityMultiplier: Sup.Math.XY): Body;\r\n      setVelocityMultiplier(x: number, y: number): Body;\r\n      getVelocityMultiplier(): Sup.Math.Vector2;\r\n\r\n      getTouches(): { top: boolean; bottom: boolean; right: boolean; left: boolean; };\r\n    }\r\n  }\r\n}\r\n",
    exposeActorComponent: { propertyName: "arcadeBody2D", className: "Sup.ArcadePhysics2D.Body" },
});

},{}]},{},[1]);
